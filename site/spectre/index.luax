local article = require("articles")["spectre"]
require("simplearticle")

require("code")

function Head()
  return <>
    <script src="script.js"></script>

    <style>
      table {
        border-collapse: collapse;
        border-style: hidden;
      }

      td, th {
        padding: var(--spacing-2);
        border: 1px solid var(--border-color);
      }

      .instrs .instr {
        height: 1rem;
        /* background-color: var(--text-color); */
        border-radius: 2px;
      }
    </style>
  </>
end

function Timing()
  return <div class="wide">
    <div class="flex flex-column items-center g2">
      <!-- Computers -->
      <div class="flex g2">
        <div class="flex flex-column g2 ba pa3 br3 overflow-hidden">
          <div>Log in</div>
          <input placeholder="Username" value="alice@example.com" />
          <input type="password" placeholder="Password" value="hunter2" />
          <button>Submit</button>
        </div>
        <div class="ba pa3 br3 overflow-hidden bg--codeblock">
          <Code lang="python" bare src=[[
  user = database.get(req.username)
  if not user:
    return "user not found"
  if not checkPassword(user.password, req.password):
    return "incorrect password"
  return "success!"
        ]] />
        </div>
        <div class="ba br3">
          <table class="h-100">
            <tr>
              <th>username</th>
              <th>password</th>
            </tr>
            <tr>
              <td>alice@example.com</td>
              <td>hunter2</td>
            </tr>
            <tr>
              <td>bob@example.com</td>
              <td>dolphins</td>
            </tr>
            <tr>
              <td>charlie@example.com</td>
              <td>Password1!</td>
            </tr>
          </table>
        </div>
      </div>

      <!-- Timeline -->
      <div class="bb flex">
        <div class="bl h1 pl4"></div>
        <div class="bl h1 pl4"></div>
        <div class="bl h1 pl4"></div>
        <div class="bl h1 pl4"></div>
        <div class="bl h1 pl4"></div>
      </div>
    </div>
  </div>
end

return <SimpleArticle article={ article } head={ Head }>
  <p>
    <i>Due to time constraints, this article does not work well on mobile. Sorry!</i>
  </p>

  <p>
    <a href="https://spectreattack.com/">Spectre</a> is a CPU vulnerability published in 2017. Or rather, it's a class of vulnerabilities—a collection of exploits inherent to the design of modern CPUs.
  </p>
  <p>
    Spectre leverages a feature of the CPU called <i>speculative execution</i> to exploit otherwise-correct programs and extract information that should otherwise be secret. Spectre is subtle, but also very simple, and in this short article I hope to give you an intuitive sense of how Spectre works and what can (or can't) be done to mitigate it.
  </p>
  <p>
    The subject of our investigation is this innocuous-looking snippet of code from the <a href="https://spectreattack.com/spectre.pdf">Spectre paper</a>. By the end, it should hopefully be clear how this seemingly correct code can be exploited.
  </p>
  <Code lang="c" src=[[
if (x < array1_size) {
  y = array2[array1[x] * 4096];
}
  ]] />

  <h2>What is speculative execution?</h2>
  <p>
    Before covering speculative execution, we first have to discuss <i>out-of-order execution</i>. Let's start with a simpler code example:
  </p>
  <Code lang="c" src=[[
arr[0] = arr[0] / 2;
arr[1] = arr[1] / 3;
  ]] />
  <p>
    We would intuitively expect the following operations to happen in the order written, but the CPU may actually execute the instructions in a different order. The end result will still be exactly the same, but this reordering can achieve much greater performance! This is because accessing memory is slow—main memory is <a href="https://gist.github.com/jboner/2841832">hundreds of times slower</a> than comparisons or arithmetic. In addition, CPUs can execute multiple instructions in parallel, overlapping the work and finishing the entire process more quickly.
  </p>
  <div class="flex justify-center mv4">
    <div class="flex flex-column">
      <h3 class="mt0">No reordering, no pipelining</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[0]</code> from memory</div>
          <div class="h1">Compute <code>arr[0] / 2</code></div>
          <div class="h1">Store the result to <code>arr[0]</code></div>
          <div class="h1">Load <code>arr[1]</code> from memory</div>
          <div class="h1">Compute <code>arr[1] / 3</code></div>
          <div class="h1">Store the result to <code>arr[1]</code></div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 10rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 14rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 16rem"></div></div>
        </div>
      </div>

      <h3>Reordering / pipelining</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[0]</code> from memory</div>
          <div class="h1">Load <code>arr[1]</code> from memory</div>
          <div class="h1">Compute <code>arr[0] / 2</code></div>
          <div class="h1">Compute <code>arr[1] / 3</code></div>
          <div class="h1">Store the result to <code>arr[0]</code></div>
          <div class="h1">Store the result to <code>arr[1]</code></div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 1rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 5rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 7rem"></div></div>
        </div>
      </div>
    </div>
  </div>

  <Timing />
</SimpleArticle>
